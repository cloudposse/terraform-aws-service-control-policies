---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-service-control-policies

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Copyrights
copyrights:
  - name: "Cloud Posse, LLC"
    url: "https://cloudposse.com"
    year: "2020"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-service-control-policies

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-service-control-policies.svg"
    url: "https://github.com/cloudposse/terraform-aws-service-control-policies/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

categories:
  - scp
  - policy
  - policies
  - service-control-policy
  - service-control-policies
  - aws
  - organization
  - ou
  - organizational-unit
  - iam
  - iam-role
  - account

# List any related terraform modules that this module may be used with or that this module depends on.
related:
  - name: "terraform-aws-iam-role"
    description: "A Terraform module that creates IAM role with provided JSON IAM polices documents."
    url: "https://github.com/cloudposse/terraform-aws-iam-role"
  - name: "terraform-aws-iam-policy-document-aggregator"
    description: "Terraform module to aggregate multiple IAM policy documents into single policy document"
    url: "https://github.com/cloudposse/terraform-aws-iam-policy-document-aggregator"
  - name: "terraform-aws-iam-chamber-s3-role"
    description: "Terraform module to provision an IAM role with configurable permissions to access S3 as chamber backend."
    url: "https://github.com/cloudposse/terraform-aws-iam-chamber-s3-role"

# List any resources helpful for someone to get started. For example, link to the hashicorp documentation or AWS documentation.
references:
  - name: "Service control policies"
    description: "Service control policies (SCPs) are a type of organization policy that you can use to manage permissions in your organization."
    url: "https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html"
  - name: "Example service control policies"
    description: "Examples of Service Control Policies (SCPs)."
    url: "https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_examples.html"
  - name: "SCP syntax"
    description: "Service control policies (SCPs) use a similar syntax to that used by AWS Identity and Access Management (IAM) permission policies and resource-based policies."
    url: "https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_syntax.html"
  - name: "Terraform Standard Module Structure"
    description: "HashiCorp's standard module structure is a file and directory layout we recommend for reusable modules distributed in separate repositories."
    url: "https://www.terraform.io/docs/modules/index.html#standard-module-structure"
  - name: "Terraform Module Requirements"
    description: "HashiCorp's guidance on all the requirements for publishing a module. Meeting the requirements for publishing a module is extremely easy."
    url: "https://www.terraform.io/docs/registry/modules/publish.html#requirements"
  - name: "Terraform `random_integer` Resource"
    description: "The resource random_integer generates random values from a given range, described by the min and max attributes of a given resource."
    url: "https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/integer"
  - name: "Terraform Version Pinning"
    description: "The required_version setting can be used to constrain which versions of the Terraform CLI can be used with your configuration"
    url: "https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version"

# Short description of this project
description: |-
  Terraform module to provision Service Control Policies (SCP) for AWS Organizations and Organizational Units.

# Introduction to the project
introduction: |-
  Service Control Policies are configured in YAML configuration files.

  See [policies](examples/complete/policies) for Service Control Policies configuration examples.

# How to use this module. Should be an easy example to copy and paste.
usage: |-
  For a complete example, see [examples/complete](examples/complete).

  For automated tests of the complete example using [bats](https://github.com/bats-core/bats-core) and [Terratest](https://github.com/gruntwork-io/terratest)
  (which tests and deploys the example on Datadog), see [test](test).


  ```hcl
    locals {
      service_control_policy_statements = flatten(
        [
          for file in fileset(path.module, "policies/*.yaml") : [
            for k, v in yamldecode(file(format("%s/%s", path.module, file))) : v
          ]
        ]
      )
    }

    data "aws_caller_identity" "this" {}

    module "service_control_policies" {
      source = "../../"

      service_control_policy_statements = local.service_control_policy_statements
      target_id                         = data.aws_caller_identity.this.account_id

      context = module.this.context
    }
  ```

# Example usage
examples: |-
  Review the [complete example](examples/complete) to see how to use this module.

# How to get started quickly
#quickstart: |-
#  Here's how to get started...

# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Andriy Knysh"
    github: "aknysh"
